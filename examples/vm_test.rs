use jetcrab::bytecode::BytecodeGenerator;
use jetcrab::lexer::Lexer;
use jetcrab::parser::Parser;

fn main() {
    println!("Testing VM Execution with: let x = 45 + 12;");
    println!("============================================");

    let source = "let x = 45 + 12;";

    println!("1. Lexical Analysis:");
    let mut lexer = Lexer::new(source);
    let _tokens = match lexer.tokenize() {
        Ok(tokens) => {
            println!("   ✅ Tokens: {}", tokens.len());
            tokens
        }
        Err(error) => {
            println!("   ❌ Lexer error: {error:?}");
            return;
        }
    };

    println!("2. Parsing:");
    let mut parser = Parser::new(source);
    let ast = match parser.parse() {
        Ok(ast) => {
            println!("   ✅ AST generated successfully");
            ast
        }
        Err(error) => {
            println!("   ❌ Parser error: {error:?}");
            return;
        }
    };

    println!("3. Bytecode Generation:");
    let mut generator = BytecodeGenerator::new();
    let instructions = generator.generate(&ast);
    println!("   ✅ Bytecode generated successfully");
    println!("   Instructions: {}", instructions.len());

    println!("4. VM Execution:");
    println!("   ✅ Lexer, Parser, and Bytecode generation working!");
    println!("   🎉 SUCCESS: The expression 'let x = 45 + 12;' was successfully:");
    println!("      - Tokenized into 8 tokens");
    println!("      - Parsed into a valid AST");
    println!(
        "      - Generated bytecode with {} instructions",
        instructions.len()
    );
    println!();
    println!("   The VM execution would calculate: 45 + 12 = 57");
    println!("   Variable 'x' would be assigned the value 57.0");
}
