use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, PartialEq, Eq, Serialize, Deserialize)]
pub enum Keyword {
    Let,
    Const,
    Var,
    Function,
    Return,
    If,
    Else,
    For,
    While,
    Do,
    Break,
    Continue,
    Switch,
    Case,
    Default,
    Try,
    Catch,
    Finally,
    Throw,
    Class,
    Extends,
    Super,
    New,
    This,
    Import,
    Export,
    From,
    As,
    Typeof,
    Instanceof,
    In,
    Of,
    Delete,
    Void,
    Yield,
    Await,
    Async,
    Get,
    Set,
    Static,
    Private,
    Public,
    Protected,
    Interface,
    Implements,
    Enum,
    Debugger,
    With,
    Strict,
}

impl Keyword {
    pub fn as_str(&self) -> &'static str {
        match self {
            Keyword::Let => "let",
            Keyword::Const => "const",
            Keyword::Var => "var",
            Keyword::Function => "function",
            Keyword::Return => "return",
            Keyword::If => "if",
            Keyword::Else => "else",
            Keyword::For => "for",
            Keyword::While => "while",
            Keyword::Do => "do",
            Keyword::Break => "break",
            Keyword::Continue => "continue",
            Keyword::Switch => "switch",
            Keyword::Case => "case",
            Keyword::Default => "default",
            Keyword::Try => "try",
            Keyword::Catch => "catch",
            Keyword::Finally => "finally",
            Keyword::Throw => "throw",
            Keyword::Class => "class",
            Keyword::Extends => "extends",
            Keyword::Super => "super",
            Keyword::New => "new",
            Keyword::This => "this",
            Keyword::Import => "import",
            Keyword::Export => "export",
            Keyword::From => "from",
            Keyword::As => "as",
            Keyword::Typeof => "typeof",
            Keyword::Instanceof => "instanceof",
            Keyword::In => "in",
            Keyword::Of => "of",
            Keyword::Delete => "delete",
            Keyword::Void => "void",
            Keyword::Yield => "yield",
            Keyword::Await => "await",
            Keyword::Async => "async",
            Keyword::Get => "get",
            Keyword::Set => "set",
            Keyword::Static => "static",
            Keyword::Private => "private",
            Keyword::Public => "public",
            Keyword::Protected => "protected",
            Keyword::Interface => "interface",
            Keyword::Implements => "implements",
            Keyword::Enum => "enum",
            Keyword::Debugger => "debugger",
            Keyword::With => "with",
            Keyword::Strict => "strict",
        }
    }

    pub fn from_string(s: &str) -> Option<Self> {
        match s {
            "let" => Some(Keyword::Let),
            "const" => Some(Keyword::Const),
            "var" => Some(Keyword::Var),
            "function" => Some(Keyword::Function),
            "return" => Some(Keyword::Return),
            "if" => Some(Keyword::If),
            "else" => Some(Keyword::Else),
            "for" => Some(Keyword::For),
            "while" => Some(Keyword::While),
            "do" => Some(Keyword::Do),
            "break" => Some(Keyword::Break),
            "continue" => Some(Keyword::Continue),
            "switch" => Some(Keyword::Switch),
            "case" => Some(Keyword::Case),
            "default" => Some(Keyword::Default),
            "try" => Some(Keyword::Try),
            "catch" => Some(Keyword::Catch),
            "finally" => Some(Keyword::Finally),
            "throw" => Some(Keyword::Throw),
            "class" => Some(Keyword::Class),
            "extends" => Some(Keyword::Extends),
            "super" => Some(Keyword::Super),
            "new" => Some(Keyword::New),
            "this" => Some(Keyword::This),
            "import" => Some(Keyword::Import),
            "export" => Some(Keyword::Export),
            "from" => Some(Keyword::From),
            "as" => Some(Keyword::As),
            "typeof" => Some(Keyword::Typeof),
            "instanceof" => Some(Keyword::Instanceof),
            "in" => Some(Keyword::In),
            "of" => Some(Keyword::Of),
            "delete" => Some(Keyword::Delete),
            "void" => Some(Keyword::Void),
            "yield" => Some(Keyword::Yield),
            "await" => Some(Keyword::Await),
            "async" => Some(Keyword::Async),
            "get" => Some(Keyword::Get),
            "set" => Some(Keyword::Set),
            "static" => Some(Keyword::Static),
            "private" => Some(Keyword::Private),
            "public" => Some(Keyword::Public),
            "protected" => Some(Keyword::Protected),
            "interface" => Some(Keyword::Interface),
            "implements" => Some(Keyword::Implements),
            "enum" => Some(Keyword::Enum),
            "debugger" => Some(Keyword::Debugger),
            "with" => Some(Keyword::With),
            "strict" => Some(Keyword::Strict),
            _ => None,
        }
    }

    pub fn matches_str(&self, s: &str) -> bool {
        self.as_str() == s
    }
}

impl PartialEq<&str> for Keyword {
    fn eq(&self, other: &&str) -> bool {
        self.as_str() == *other
    }
}

impl PartialEq<str> for Keyword {
    fn eq(&self, other: &str) -> bool {
        self.as_str() == other
    }
}
